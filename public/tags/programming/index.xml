<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Programming on Adler Medrado's corner of the web</title><link>https://adlermedrado.com.br/tags/programming/</link><description>Recent content in Programming on Adler Medrado's corner of the web</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sun, 03 Nov 2024 10:58:18 -0300</lastBuildDate><atom:link href="https://adlermedrado.com.br/tags/programming/index.xml" rel="self" type="application/rss+xml"/><item><title>Understanding when to use stream() vs forEach() in Java</title><link>https://adlermedrado.com.br/posts/stream-vs-foreach-in-java/</link><pubDate>Sun, 03 Nov 2024 10:58:18 -0300</pubDate><guid>https://adlermedrado.com.br/posts/stream-vs-foreach-in-java/</guid><description>&lt;p>In Java, choosing between Stream() and ForEach() depends on what you want to do with your data. While both are used to iterate over collections, each has its own strengths.&lt;/p>
&lt;h2 id="stream">stream()&lt;/h2>
&lt;p>Using stream() is powerful for complex data transformations, allowing operations like filtering, mapping, and reducing. It&amp;rsquo;s ideal for:&lt;/p>
&lt;ul>
&lt;li>Transformations and filters: Use Stream() to apply operations like filtering, mapping, grouping, or reducing data.&lt;/li>
&lt;li>Chained processing: Apply multiple operations in a single chain.&lt;/li>
&lt;li>Parallel processing: For large datasets, use parallelStream() to leverage multi-core processors.&lt;/li>
&lt;li>Immutability: Streams avoid side effects, allowing new collections to be generated without changing the original.&lt;/li>
&lt;/ul>
&lt;h4 id="example">Example:&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>List&lt;span style="color:#f92672">&amp;lt;&lt;/span>String&lt;span style="color:#f92672">&amp;gt;&lt;/span> names &lt;span style="color:#f92672">=&lt;/span> Arrays.&lt;span style="color:#a6e22e">asList&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Maria&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;José&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;João&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>List&lt;span style="color:#f92672">&amp;lt;&lt;/span>String&lt;span style="color:#f92672">&amp;gt;&lt;/span> filteredNames &lt;span style="color:#f92672">=&lt;/span> names.&lt;span style="color:#a6e22e">stream&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#a6e22e">filter&lt;/span>(name &lt;span style="color:#f92672">-&amp;gt;&lt;/span> name.&lt;span style="color:#a6e22e">startsWith&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;J&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#a6e22e">map&lt;/span>(String::toUpperCase)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#a6e22e">collect&lt;/span>(Collectors.&lt;span style="color:#a6e22e">toList&lt;/span>());
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The results will be a new list only with the names started with &lt;em>J&lt;/em> in uppercase.&lt;/p></description></item></channel></rss>